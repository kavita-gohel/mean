import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { AbstractControlValueAccessor } from '../util/abstract-value-accessor';
export var DISPLAY_TYPE;
(function (DISPLAY_TYPE) {
    DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
    DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
})(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
export class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.DISPLAY_TYPE = DISPLAY_TYPE;
        this.placeholder = '';
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    ngOnInit() {
        if (!this.formControl && !this.matAutocomplete)
            this.mode = DISPLAY_TYPE.SIMPLE;
        else if (this.formControl && this.matAutocomplete)
            this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
        else if (this.formControl)
            this.mode = DISPLAY_TYPE.FORMCONTROL;
        else if (this.matAutocomplete)
            this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
    }
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
}
MatSearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-search-bar',
                template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
                animations: [
                    trigger('slideInOut', [
                        state('true', style({ width: '*' })),
                        state('false', style({ width: '0' })),
                        transition('true => false', animate('300ms ease-in')),
                        transition('false => true', animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSearchBarComponent),
                        multi: true
                    }
                ],
                styles: [":host{align-items:center;display:flex;flex-direction:row;height:24px;justify-content:flex-end;position:relative;width:24px}.mat-search_field{padding:0 24px 0 0;position:absolute;z-index:1}.mat-search_icons{display:block;left:0;margin:0;padding:0;position:absolute;top:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{border-radius:50%;left:0;position:absolute;top:0;transition:all .2s cubic-bezier(.4,0,.2,1);z-index:2}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;transform:rotate(1turn);visibility:visible;z-index:3}"]
            },] }
];
MatSearchBarComponent.propDecorators = {
    inputElement: [{ type: ViewChild, args: ['input',] }],
    formControl: [{ type: Input }],
    matAutocomplete: [{ type: Input }],
    placeholder: [{ type: Input }],
    onBlur: [{ type: Output }],
    onClose: [{ type: Output }],
    onEnter: [{ type: Output }],
    onFocus: [{ type: Output }],
    onOpen: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9uZy1tYXQtc2VhcmNoLWJhci9tYXQtc2VhcmNoLWJhci9tYXQtc2VhcmNoLWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQ0wsU0FBUyxFQUVULFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFlLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHaEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFL0UsTUFBTSxDQUFOLElBQVksWUFLWDtBQUxELFdBQVksWUFBWTtJQUN0QixtREFBTSxDQUFBO0lBQ04sNkRBQVcsQ0FBQTtJQUNYLCtEQUFZLENBQUE7SUFDWiwyRkFBMEIsQ0FBQTtBQUM1QixDQUFDLEVBTFcsWUFBWSxLQUFaLFlBQVksUUFLdkI7QUFzQkQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLDRCQUFvQztJQXBCL0U7O1FBc0JFLGlCQUFZLEdBQUcsWUFBWSxDQUFDO1FBTW5CLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWhCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3BDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ25DLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3JDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3JDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRzVDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0lBc0N4QixDQUFDO0lBcENDLFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO1lBQzVDLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQzthQUM3QixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLGVBQWU7WUFDL0MsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUMsMEJBQTBCLENBQUM7YUFDakQsSUFBSSxJQUFJLENBQUMsV0FBVztZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQzthQUMzRCxJQUFJLElBQUksQ0FBQyxlQUFlO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxLQUFLO1FBQ1YsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxVQUFVLENBQUMsV0FBbUI7UUFDNUIsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXLENBQUMsV0FBbUI7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFdBQVcsQ0FBQyxXQUFtQjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7WUExRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLDYyRUFBOEM7Z0JBRTlDLFVBQVUsRUFBRTtvQkFDVixPQUFPLENBQUMsWUFBWSxFQUFFO3dCQUNwQixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUNwQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUNyQyxVQUFVLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQzt3QkFDckQsVUFBVSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztxQkFDdkQsQ0FBQztpQkFDSDtnQkFDRCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzt3QkFDcEQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7O2FBQ0Y7OzsyQkFLRSxTQUFTLFNBQUMsT0FBTzswQkFFakIsS0FBSzs4QkFDTCxLQUFLOzBCQUNMLEtBQUs7cUJBRUwsTUFBTTtzQkFDTixNQUFNO3NCQUNOLE1BQU07c0JBQ04sTUFBTTtxQkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgc3RhdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0QXV0b2NvbXBsZXRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYXV0b2NvbXBsZXRlJztcblxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4uL3V0aWwvYWJzdHJhY3QtdmFsdWUtYWNjZXNzb3InO1xuXG5leHBvcnQgZW51bSBESVNQTEFZX1RZUEUge1xuICBTSU1QTEUsXG4gIEZPUk1DT05UUk9MLFxuICBBVVRPQ09NUExFVEUsXG4gIEZPUk1DT05UUk9MQU5EQVVUT0NPTVBMRVRFXG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hdC1zZWFyY2gtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3NsaWRlSW5PdXQnLCBbXG4gICAgICBzdGF0ZSgndHJ1ZScsIHN0eWxlKHsgd2lkdGg6ICcqJyB9KSksXG4gICAgICBzdGF0ZSgnZmFsc2UnLCBzdHlsZSh7IHdpZHRoOiAnMCcgfSkpLFxuICAgICAgdHJhbnNpdGlvbigndHJ1ZSA9PiBmYWxzZScsIGFuaW1hdGUoJzMwMG1zIGVhc2UtaW4nKSksXG4gICAgICB0cmFuc2l0aW9uKCdmYWxzZSA9PiB0cnVlJywgYW5pbWF0ZSgnMzAwbXMgZWFzZS1vdXQnKSlcbiAgICBdKVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1hdFNlYXJjaEJhckNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNYXRTZWFyY2hCYXJDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xWYWx1ZUFjY2Vzc29yPHN0cmluZz5cbiAgaW1wbGVtZW50cyBPbkluaXQge1xuICBESVNQTEFZX1RZUEUgPSBESVNQTEFZX1RZUEU7XG5cbiAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgQElucHV0KCkgZm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xuICBASW5wdXQoKSBtYXRBdXRvY29tcGxldGU6IE1hdEF1dG9jb21wbGV0ZTtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXIgPSAnJztcblxuICBAT3V0cHV0KCkgb25CbHVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBvbkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgb25FbnRlciA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgb25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgb25PcGVuID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIG1vZGU6IERJU1BMQVlfVFlQRTtcbiAgc2VhcmNoVmlzaWJsZSA9IGZhbHNlO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5mb3JtQ29udHJvbCAmJiAhdGhpcy5tYXRBdXRvY29tcGxldGUpXG4gICAgICB0aGlzLm1vZGUgPSBESVNQTEFZX1RZUEUuU0lNUExFO1xuICAgIGVsc2UgaWYgKHRoaXMuZm9ybUNvbnRyb2wgJiYgdGhpcy5tYXRBdXRvY29tcGxldGUpXG4gICAgICB0aGlzLm1vZGUgPSBESVNQTEFZX1RZUEUuRk9STUNPTlRST0xBTkRBVVRPQ09NUExFVEU7XG4gICAgZWxzZSBpZiAodGhpcy5mb3JtQ29udHJvbCkgdGhpcy5tb2RlID0gRElTUExBWV9UWVBFLkZPUk1DT05UUk9MO1xuICAgIGVsc2UgaWYgKHRoaXMubWF0QXV0b2NvbXBsZXRlKSB0aGlzLm1vZGUgPSBESVNQTEFZX1RZUEUuQVVUT0NPTVBMRVRFO1xuICB9XG5cbiAgcHVibGljIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuc2VhcmNoVmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB0aGlzLnVwZGF0ZUNoYW5nZXMoKTtcbiAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xuICB9XG5cbiAgcHVibGljIG9wZW4oKTogdm9pZCB7XG4gICAgdGhpcy5zZWFyY2hWaXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgdGhpcy5vbk9wZW4uZW1pdCgpO1xuICB9XG5cbiAgb25CbHVycmluZyhzZWFyY2hWYWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKCFzZWFyY2hWYWx1ZSkge1xuICAgICAgdGhpcy5zZWFyY2hWaXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMub25CbHVyLmVtaXQoc2VhcmNoVmFsdWUpO1xuICB9XG5cbiAgb25FbnRlcnJpbmcoc2VhcmNoVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub25FbnRlci5lbWl0KHNlYXJjaFZhbHVlKTtcbiAgfVxuXG4gIG9uRm9jdXNzaW5nKHNlYXJjaFZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9uRm9jdXMuZW1pdChzZWFyY2hWYWx1ZSk7XG4gIH1cbn1cbiJdfQ==